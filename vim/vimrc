""""""""""""""""""""""""""
" Vim Configuration File "
""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ensure vi compatbility is turned off
set nocompatible

" Save viminfo in XDG state folder
set viminfofile=$XDG_STATE_HOME/vim/viminfo

" Get rid of startup screen
set shortmess+=I

" Reduce update time for plugins
set updatetime=1000

" Set how many lines of command history to remember
set history=100

" Use persistent history
silent! call mkdir("/tmp/vim-undo", "", 0700)
set undodir=/tmp/vim-undo
set undofile

" Use UTF-8 character encoding
set encoding=utf-8

" Maintain file attributes
set backupcopy=yes

" Automatically re-read file if is changed from the outside
set autoread

" Enable filetype plugins
filetype plugin on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" In terminal change cursor to I-Beam in insert mode
if &term =~ "xterm"
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif

" Set the nubmer of context lines above and below the cursor
set scrolloff=7

" Break lines without breaking words
set linebreak

"Always show current position
set ruler

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Configure commmand completion
set wildmenu
set wildignore+=*~,*.swp,*.tmp
set wildignore+=.DS_Store

" Set search options
set incsearch
set hlsearch
set ignorecase
set smartcase
set shortmess-=S

" Don't redraw while executing macros
set lazyredraw

" Show matching brace when cursor is over a brace
set showmatch
set matchtime=2

" Remove netrw banner
let g:netrw_banner = 0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax on

" Set Theme
:silent! colorscheme flattened_dark


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set indentation
filetype indent on
set autoindent

" Set tab and eol display characters
set listchars=tab:‣\ ,eol:¬


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 1 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
:set viminfo^=%


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Hide default mode indicator
set noshowmode

" For airline replace line percent with total number of lines
let g:airline_powerline_fonts = 1
let g:airline_symbols = {}
let g:airline#extensions#branch#vcs_checks = []
let g:airline_extensions = ['branch', 'whitespace', 'ale']
let g:airline_exclude_filetypes=['nerdtree', 'qf', 'tagbar']
let g:airline_skip_empty_sections = 1
let g:airline_section_z = '%-10(ln %l/%L%) %-6(col %c%)'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => IDE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Language completion
set completeopt=longest,menuone

" Set NERDTree options
let NERDTreeMinimalUI = 1
let NERDTreeIgnore = ['\.pyc$', '^__pycache__$']
let g:NERDTreeStatusline = ' NERDTree %=%L items '

" Set Gutentag options
let g:gutentags_ctags_tagfile = ".tags"

" Set Tagbar options
let g:tagbar_compact = 1

" Set CtrlP options
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Set ALE options
let g:ale_enabled = 0
let g:ale_linters_explicit = 1
let g:ale_virtualtext_cursor = 0
let g:ale_completion_enabled = 0
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%code%] [%severity%]'

" Set GitGutter options
let g:gitgutter_enabled = 0

" Set Windsurf options
let g:codeium_enabled = v:false

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Define a custom map leader
let mapleader = ","
let g:mapleader = ","

" Map colon
nnoremap ; :
nnoremap : ;

" Switch flattended themes
nnoremap <F5> :colorscheme flattened_dark<CR>
nnoremap <F6> :colorscheme flattened_light<CR>

" Fast saving and quiting
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>x :wq<CR>

" Indent or unindent entire file
nnoremap <leader>i gg=G<C-O><C-O>
nnoremap <leader>u :%left<CR>

" Toggle line numbers
nnoremap <silent><leader>n :set invnumber<CR>
nnoremap <silent><leader>r :set invrelativenumber<CR>

" Remove trailing white space
:nnoremap <Leader>rt :let _save_pos=getpos(".") <Bar>
    \ :let _s=@/ <Bar>
    \ :%s/\s\+$//e <Bar>
    \ :let @/=_s <Bar>
    \ :nohl <Bar>
    \ :unlet _s<Bar>
    \ :call setpos('.', _save_pos)<Bar>
    \ :unlet _save_pos<CR><CR>

" Toggle highlighting on/off
nnoremap <silent><leader>h :set hlsearch!<CR>

" Toggle `set list`
nnoremap <silent><leader>l :set list!<CR>

" Tooggle cursor line and column
nnoremap <silent><leader>c :set cursorcolumn!<Bar>set cursorline!<CR>

" Toggle and untoggle spell checking
nnoremap <leader>sc :setlocal spell!<CR>

" Location list navigation
nnoremap <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>

" Delete in visual mode
vnoremap <BS> d

" Toggle IDE windows
nnoremap <silent><leader>[ :NERDTreeToggle <BAR> wincmd p<CR>
nnoremap <silent><leader>] :TagbarToggle<CR>

" ALE mappings
nmap <leader>al <Plug>(ale_toggle)
nmap <leader>af <Plug>(ale_fix)
imap <C-Space> <Plug>(ale_complete)
imap <C-@> <Plug>(ale_complete)
nmap <C-k> <Plug>(ale_previous_wrap)
nmap <C-j> <Plug>(ale_next_wrap)

" GitGutter mappings
nnoremap <silent><leader>gg :GitGutterToggle<CR>
nnoremap <silent><leader>gs :GitGutterSignsToggle<CR>
